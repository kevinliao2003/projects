{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:36: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  data_space = data_space.drop('movie', 1) #1 for cols\n",
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:49: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  data_space = data_space.drop('date', 1)\n",
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:50: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  data_space = data_space.drop('start_time', 1)\n",
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:51: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  data_space = data_space.drop('max_time', 1)\n",
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:52: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  data_space = data_space.drop('end_time', 1)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   rank x_class      start_datetime        max_datetime        end_datetime  \\\n",
      "0     1    X28+ 2003-11-04 19:29:00 2003-11-04 19:53:00 2003-11-04 20:06:00   \n",
      "1     2    X20+ 2001-04-02 21:32:00 2001-04-02 21:51:00 2001-04-02 22:03:00   \n",
      "2     3  X17.2+ 2003-10-28 09:51:00 2003-10-28 11:10:00 2003-10-28 11:24:00   \n",
      "3     4    X17+ 2005-09-07 17:17:00 2005-09-07 17:40:00 2005-09-07 18:03:00   \n",
      "4     5   X14.4 2001-04-15 13:19:00 2001-04-15 13:50:00 2001-04-15 13:55:00   \n",
      "5     6     X10 2003-10-29 20:37:00 2003-10-29 20:49:00 2003-10-29 21:01:00   \n",
      "6     7    X9.4 1997-11-06 11:49:00 1997-11-06 11:55:00 1997-11-06 12:01:00   \n",
      "7     8    X9.3 2017-09-06 11:53:00 2017-09-06 12:02:00 2017-09-06 12:10:00   \n",
      "8     9      X9 2006-12-05 10:18:00 2006-12-05 10:35:00 2006-12-05 10:45:00   \n",
      "9    10    X8.3 2003-11-02 17:03:00 2003-11-02 17:25:00 2003-11-02 17:39:00   \n",
      "10   11    X8.2 2017-09-10 15:35:00 2017-09-10 16:06:00 2017-09-10 16:31:00   \n",
      "11   12    X7.1 2005-01-20 06:36:00 2005-01-20 07:01:00 2005-01-20 07:26:00   \n",
      "12   13    X6.9 2011-08-09 07:48:00 2011-08-09 08:05:00 2011-08-09 08:08:00   \n",
      "13   14    X6.5 2006-12-06 18:29:00 2006-12-06 18:47:00 2006-12-06 19:00:00   \n",
      "14   15    X6.2 2005-09-09 19:13:00 2005-09-09 20:04:00 2005-09-09 20:36:00   \n",
      "15   16    X6.2 2001-12-13 14:20:00 2001-12-13 14:30:00 2001-12-13 14:35:00   \n",
      "16   17    X5.7 2000-07-14 10:03:00 2000-07-14 10:24:00 2000-07-14 10:43:00   \n",
      "17   18    X5.6 2001-04-06 19:10:00 2001-04-06 19:21:00 2001-04-06 19:31:00   \n",
      "18   19    X5.4 2012-03-07 00:02:00 2012-03-07 00:24:00 2012-03-07 00:40:00   \n",
      "19   20    X5.4 2005-09-08 20:52:00 2005-09-08 21:06:00 2005-09-08 21:17:00   \n",
      "20   21    X5.4 2003-10-23 08:19:00 2003-10-23 08:35:00 2003-10-23 08:49:00   \n",
      "21   22    X5.3 2001-08-25 16:23:00 2001-08-25 16:45:00 2001-08-25 17:04:00   \n",
      "22   23    X4.9 2014-02-25 00:39:00 2014-02-25 00:49:00 2014-02-25 01:03:00   \n",
      "23   24    X4.9 1998-08-18 22:10:00 1998-08-18 22:19:00 1998-08-18 22:28:00   \n",
      "24   25    X4.8 2002-07-23 00:18:00 2002-07-23 00:35:00 2002-07-23 00:47:00   \n",
      "25   26      X4 2000-11-26 16:34:00 2000-11-26 16:48:00 2000-11-26 16:56:00   \n",
      "26   27    X3.9 2003-11-03 09:43:00 2003-11-03 09:55:00 2003-11-03 10:19:00   \n",
      "27   28    X3.9 1998-08-19 21:35:00 1998-08-19 21:45:00 1998-08-19 21:50:00   \n",
      "28   29    X3.8 2005-01-17 06:59:00 2005-01-17 09:52:00 2005-01-17 10:07:00   \n",
      "29   30    X3.7 1998-11-22 06:30:00 1998-11-22 06:42:00 1998-11-22 06:49:00   \n",
      "30   31    X3.6 2005-09-09 09:42:00 2005-09-09 09:59:00 2005-09-09 10:08:00   \n",
      "31   32    X3.6 2004-07-16 13:49:00 2004-07-16 13:55:00 2004-07-16 14:01:00   \n",
      "32   33    X3.6 2003-05-28 00:17:00 2003-05-28 00:27:00 2003-05-28 00:39:00   \n",
      "33   34    X3.4 2006-12-13 02:14:00 2006-12-13 02:40:00 2006-12-13 02:57:00   \n",
      "34   35    X3.4 2001-12-28 20:02:00 2001-12-28 20:45:00 2001-12-28 21:32:00   \n",
      "35   36    X3.3 2013-11-05 22:07:00 2013-11-05 22:12:00 2013-11-05 22:15:00   \n",
      "36   37    X3.3 2002-07-20 21:04:00 2002-07-20 21:30:00 2002-07-20 21:54:00   \n",
      "37   38    X3.3 1998-11-28 04:54:00 1998-11-28 05:52:00 1998-11-28 06:13:00   \n",
      "38   39    X3.2 2013-05-14 00:00:00 2013-05-14 01:11:00 2013-05-14 01:20:00   \n",
      "39   40    X3.1 2014-10-24 21:07:00 2014-10-24 21:41:00 2014-10-24 22:13:00   \n",
      "40   41    X3.1 2002-08-24 00:49:00 2002-08-24 01:12:00 2002-08-24 01:31:00   \n",
      "41   42      X3 2002-07-15 19:59:00 2002-07-15 20:08:00 2002-07-15 20:14:00   \n",
      "42   43    X2.8 2013-05-13 15:48:00 2013-05-13 16:05:00 2013-05-13 16:16:00   \n",
      "43   44    X2.8 2001-12-11 07:58:00 2001-12-11 08:08:00 2001-12-11 08:14:00   \n",
      "44   45    X2.8 1998-08-18 08:14:00 1998-08-18 08:24:00 1998-08-18 08:32:00   \n",
      "45   46    X2.7 2015-05-05 22:05:00 2015-05-05 22:11:00 2015-05-05 22:15:00   \n",
      "46   47    X2.7 2003-11-03 01:09:00 2003-11-03 01:30:00 2003-11-03 01:45:00   \n",
      "47   48    X2.7 1998-05-06 07:58:00 1998-05-06 08:09:00 1998-05-06 08:20:00   \n",
      "48   49    X2.6 2005-01-15 22:25:00 2005-01-15 23:02:00 2005-01-15 23:31:00   \n",
      "49   50    X2.6 2001-09-24 09:32:00 2001-09-24 10:38:00 2001-09-24 11:09:00   \n",
      "\n",
      "   region  \n",
      "0    0486  \n",
      "1    9393  \n",
      "2    0486  \n",
      "3    0808  \n",
      "4    9415  \n",
      "5    0486  \n",
      "6    8100  \n",
      "7    2673  \n",
      "8    0930  \n",
      "9    0486  \n",
      "10   2673  \n",
      "11   0720  \n",
      "12   1263  \n",
      "13   0930  \n",
      "14   0808  \n",
      "15   9733  \n",
      "16   9077  \n",
      "17   9415  \n",
      "18   1429  \n",
      "19   0808  \n",
      "20   0486  \n",
      "21   9591  \n",
      "22   1990  \n",
      "23   8307  \n",
      "24   0039  \n",
      "25   9236  \n",
      "26   0488  \n",
      "27   8307  \n",
      "28   0720  \n",
      "29   8384  \n",
      "30   0808  \n",
      "31   0649  \n",
      "32   0365  \n",
      "33   0930  \n",
      "34   9767  \n",
      "35   1890  \n",
      "36   0039  \n",
      "37   8395  \n",
      "38   1748  \n",
      "39   2192  \n",
      "40   0069  \n",
      "41   0030  \n",
      "42   1748  \n",
      "43   9733  \n",
      "44   8307  \n",
      "45   2339  \n",
      "46   0488  \n",
      "47   8210  \n",
      "48   0720  \n",
      "49   9632  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:143: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  data_nasa = data_nasa.drop('end_date', 1)\n",
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:144: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  data_nasa = data_nasa.drop('end_time', 1)\n",
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:145: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  data_nasa = data_nasa.drop('cme_date', 1)\n",
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:146: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  data_nasa = data_nasa.drop('cme_time', 1)\n",
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:153: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  top50Flares['flare_classification'] = top50Flares['flare_classification'].str.lstrip('X')\n",
      "C:\\Users\\Kevin\\AppData\\Local\\Temp\\ipykernel_27800\\1218233040.py:155: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  top50Flares['flare_classification'] = top50Flares.flare_classification.astype(float)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1ee11fe45e0>]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "\n",
    "#Part 1: Data scraping and preparation\n",
    "#STEP 1\n",
    "#scrapes the data from the Space Weather Live site\n",
    "headers = {\n",
    "'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',\n",
    "'From': 'pleaseletmein@gmail.com'\n",
    "}\n",
    "r = requests.get(\"https://www.spaceweatherlive.com/en/solar-activity/top-50-solar-flares.html\", headers=headers)\n",
    "\n",
    "#extracts the text from the page\n",
    "#reads and parses the data as html\n",
    "root = BeautifulSoup(r.content, 'html.parser')\n",
    "\n",
    "#finds the appropriate table\n",
    "table = root.find('table')\n",
    "\n",
    "#uses pandas to read in the HTML file\n",
    "#the range is 0-50, because there are a maximum of 50 rows and columns\n",
    "data_space = pd.DataFrame(columns=['rank', 'x_class', 'date', 'region', 'start_time', \n",
    "                                   'max_time', 'end_time', 'movie'], index = range(0, 50))\n",
    "#fills the table with the required data\n",
    "row_index = 0\n",
    "for row in table.find_all('tr'): #for each row\n",
    "    col_index = 0\n",
    "    for col in row.find_all('td'): #for each col\n",
    "        data_space.iat[row_index - 1, col_index] = col.get_text() #fills the table with data\n",
    "        col_index += 1\n",
    "    row_index += 1\n",
    "\n",
    "#STEP 2\n",
    "#drops the last column of the table, as specified in the instructions\n",
    "data_space = data_space.drop('movie', 1) #1 for cols\n",
    "\n",
    "#combines the date and each of the three time columns into three datetime columns\n",
    "start = pd.to_datetime(data_space['date'] + ' ' + data_space['start_time'])\n",
    "max = pd.to_datetime(data_space['date'] + ' ' + data_space['max_time'])\n",
    "end = pd.to_datetime(data_space['date'] + ' ' + data_space['end_time'])\n",
    "\n",
    "#updates the values in the dataframe\n",
    "data_space['start_datetime'] = start\n",
    "data_space['max_datetime'] = max\n",
    "data_space['end_datetime'] = end\n",
    "\n",
    "#removes 'date', 'start_time', 'max_time', and 'end_time' columns\n",
    "data_space = data_space.drop('date', 1)\n",
    "data_space = data_space.drop('start_time', 1)\n",
    "data_space = data_space.drop('max_time', 1)\n",
    "data_space = data_space.drop('end_time', 1)\n",
    "\n",
    "#rearranges the columns\n",
    "data_space = data_space[['rank', 'x_class', 'start_datetime', 'max_datetime', 'end_datetime', 'region']]\n",
    "\n",
    "#sets regions coded as - as missing (NaN), as specified in the instructions\n",
    "#however, there are no regions coded as -\n",
    "data_space = data_space.replace('-', 'NaN')\n",
    "\n",
    "#STEP 3\n",
    "#scrapes the data from the NASA site\n",
    "r = requests.get('http://cdaw.gsfc.nasa.gov/CME_list/radio/waves_type2.html', headers=headers)\n",
    "root = BeautifulSoup(r.content)\n",
    "#extracts the text from the website\n",
    "table = root.find('pre')\n",
    "\n",
    "#turns the raw text into readable data\n",
    "text = table.get_text()\n",
    "\n",
    "#puts each line into an array\n",
    "lines = text.split('\\n')\n",
    "\n",
    "#removes unecessary lines from the newly created array\n",
    "for i in range(0, 12): #removes lines from the beginning\n",
    "    lines.pop(0)\n",
    "for i in range(0, 2): #removes lines from the end\n",
    "    lines.pop(len(lines) - 1)\n",
    "\n",
    "#creates the table\n",
    "#range is 0 to 522, because there are a maximum of 522 rows and columns\n",
    "data_nasa = pd.DataFrame(columns=['start_date', 'start_time', 'end_date', 'end_time', 'start_frequency', \n",
    "                            'end_frequency', 'flare_location', 'flare_region', 'flare_classification', 'cme_date', 'cme_time', 'cme_angle',\n",
    "                            'cme_width', 'cme_speed'], index = range(0, 522))\n",
    "#fills the table with the required data\n",
    "row_index = 0\n",
    "for line in lines: #for each line\n",
    "    info = line.split(' ') #gets each piece of information (e.g. start_date, start_time, etc.)\n",
    "    while '' in info: #removes empty data\n",
    "        info.remove('')\n",
    "    col_index = 0\n",
    "    #fills in the information\n",
    "    while col_index < 14: #there are 14 columns of information (e.g. start_date, start_time, etc.)\n",
    "        data_nasa.iat[row_index, col_index] = info[col_index]\n",
    "        col_index += 1\n",
    "    row_index += 1\n",
    "\n",
    "#STEP 4\n",
    "#recodes any missing entries as NaN, as specified in the instructions\n",
    "data_nasa = data_nasa.replace('----', 'NaN')\n",
    "data_nasa = data_nasa.replace('-----', 'NaN')\n",
    "\n",
    "#creates a new column that indicates if a row corresponds to a halo flare\n",
    "#replaces Halo entries in the cme_angle column as NA\n",
    "data_nasa['is_halo'] = data_nasa['cme_angle'].map(lambda var : var == 'Halo')\n",
    "data_nasa = data_nasa.replace('Halo', 'NA')\n",
    "\n",
    "#creates a new column that indicates if width is given as a lower bound\n",
    "data_nasa['width_lower_bound'] = data_nasa['cme_width'].map(lambda var : str(var)[0] == '>')\n",
    "\n",
    "#determines if a piece of data is an integer\n",
    "def isnumeric(var):\n",
    "    try:\n",
    "        int(var)\n",
    "        return True\n",
    "    except ValueError:\n",
    "        return False\n",
    "#removes any non-numeric part of the width column\n",
    "data_nasa['cme_width'] = data_nasa['cme_width'].map(lambda var : var if isnumeric(var) else \"\")\n",
    "\n",
    "#reformats end_date and cme_date\n",
    "for row in range(len(lines)):\n",
    "    start_date = data_nasa.values[row][0].split('/') \n",
    "    start_date_year = start_date[0] #gets the start_date year\n",
    "    data_nasa.iat[row, 2] = start_date_year + '/' + data_nasa.values[row][2] #reformats end_date\n",
    "    data_nasa.iat[row, 9] = start_date_year + '/' + data_nasa.values[row][9] #reformats cme_date\n",
    "\n",
    "#combines date and time columns for start, end and cme so they can be encoded as datetime objects\n",
    "data_nasa['start_datetime'] = pd.to_datetime(data_nasa['start_date'] + ' ' + data_nasa['start_time'])\n",
    "data_nasa['end_datetime'] = \"\"\n",
    "data_nasa['cme_datetime'] = \"\"\n",
    "data_nasa = data_nasa[['end_date', 'end_time', 'start_datetime', 'end_datetime', \n",
    "             'start_frequency', 'end_frequency', 'flare_location', 'flare_region', 'flare_classification', \n",
    "             'cme_date', 'cme_time', 'cme_datetime','cme_angle', 'cme_width', 'cme_speed', 'is_halo', 'width_lower_bound']]\n",
    "#fills in end_datetime and cme_datetime with pieces of data\n",
    "for row in range(len(lines)):\n",
    "    #reformats end_datetime\n",
    "    data_nasa.iat[row, 3] = data_nasa.values[row][0].replace('/', '-') + ' ' + data_nasa.values[row][1] + \":00\"\n",
    "    #reformats cme_datetime\n",
    "    data_nasa.iat[row, 11] = data_nasa.values[row][9].replace('/', '-') + ' ' + data_nasa.values[row][10] + \":00\"\n",
    "\n",
    "#removes unncessary columns\n",
    "data_nasa = data_nasa.drop('end_date', 1)\n",
    "data_nasa = data_nasa.drop('end_time', 1)\n",
    "data_nasa = data_nasa.drop('cme_date', 1)\n",
    "data_nasa = data_nasa.drop('cme_time', 1)\n",
    "\n",
    "#Part 2: Analysis\n",
    "#Question 1: Replication\n",
    "#classifications with 'X' are the highest\n",
    "top50Flares = data_nasa.loc[data_nasa['flare_classification'].str.contains('X')]\n",
    "#removes the 'X'\n",
    "top50Flares['flare_classification'] = top50Flares['flare_classification'].str.lstrip('X')\n",
    "#converts string to float\n",
    "top50Flares['flare_classification'] = top50Flares.flare_classification.astype(float)\n",
    "#sorts the flares\n",
    "top50Flares = top50Flares.sort_values('flare_classification', ascending = False)\n",
    "#gets the top 50\n",
    "top50Flares = top50Flares.head(50)\n",
    "#converts flare_classfication back to string\n",
    "top50Flares['flare_classification'] = top50Flares.flare_classification.astype(str)\n",
    "top50Flares['flare_classification'] = \"X\" + top50Flares['flare_classification']\n",
    "\n",
    "#Question 2: Integration\n",
    "#if a flare in NASA is in Space Weather Live\n",
    "data_nasa['NASA->SPACE'] = pd.Series('NaN', index = data_space.index)\n",
    "#finds the best matching row in NASA for each of the top 50 solar flares in SpaceWeatherLive\n",
    "def get_rank(index):\n",
    "    for row_index, row in data_space.iterrows(): #for each row in SpaceWeatherLive\n",
    "        #checks flare_classification - index 6 in data_nasa\n",
    "        #checks x_class - index 1 in row\n",
    "        if data_nasa.iat[row_index, 6] == row[1]:\n",
    "            return row['rank'] #gets the rank of the flare\n",
    "    return \"NaN\" #default return type\n",
    "for row_index, row in data_nasa.iterrows(): #for each row in NASA\n",
    "    rank = get_rank(row_index) #gets rank\n",
    "    #matches row in NASA data\n",
    "    data_nasa.iat[row_index, 13] = rank\n",
    "\n",
    "#Question 3: Analysis\n",
    "import matplotlib.pyplot as plot \n",
    "import numpy as np\n",
    "\n",
    "#plots the starting frequencies\n",
    "top50Flares.sort_values(\"start_datetime\", ascending = True)\n",
    "plot.plot(top50Flares['start_datetime'], top50Flares['start_frequency'], '*')\n",
    "\n",
    "#Question 3 Writeup\n",
    "#Based on the plot, there doesn't seem to be a clear correlaton between the start_datetime and start_frequency.\n",
    "#In other words, we say that there is neither a positive nor negative correlation.\n",
    "#With respect to outliers, there seem to be a few in the 2000 to 2008 range. This would affect the skew of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "9f4f70181dd95a9d562a70f836fcadba96ae89ae4a502bd83f1e00f915c26e41"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
